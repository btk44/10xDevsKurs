name: Pull Request Workflow

on:
  pull_request:
    branches:
      - master

env:
  NODE_VERSION: "22.14.0"

jobs:
  lint:
    name: Lint Code
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up Node.js
        uses: actions/setup-node@v6
        with:
          node-version-file: .nvmrc
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Run linting
        run: npm run lint

  unit-test:
    name: Unit Tests
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up Node.js
        uses: actions/setup-node@v6
        with:
          node-version-file: .nvmrc
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Run unit tests with coverage
        run: npm run test:coverage -- --reporter=junit --outputFile=coverage/junit.xml

      - name: Upload unit test coverage
        uses: actions/upload-artifact@v4
        with:
          name: unit-tests-coverage
          path: coverage/
          retention-days: 4

  e2e-test:
    name: E2E Tests
    runs-on: ubuntu-latest
    needs: lint
    environment: test
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up Node.js
        uses: actions/setup-node@v6
        with:
          node-version-file: .nvmrc
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Install Playwright browsers
        run: npx playwright install --with-deps chromium

      - name: Run e2e tests
        run: npm run test:e2e
        env:
          SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
          SUPABASE_KEY: ${{ secrets.SUPABASE_KEY }}
          E2E_USERNAME: ${{ secrets.E2E_USERNAME }}
          E2E_PASSWORD: ${{ secrets.E2E_PASSWORD }}
          E2E_TEST_USER_ID: ${{ secrets.E2E_TEST_USER_ID }}

      - name: Upload e2e test coverage
        uses: actions/upload-artifact@v4
        with:
          name: e2e-tests-coverage
          path: playwright-report/
          retention-days: 4

  status-comment:
    name: Status Comment
    runs-on: ubuntu-latest
    needs: [lint, unit-test, e2e-test]
    if: always()
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Comment PR with status
        uses: actions/github-script@v8
        with:
          script: |
            const { data: checks } = await github.rest.checks.listForRef({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: context.sha,
              status: 'completed'
            });

            const jobs = checks.check_runs.filter(check =>
              ['Lint Code', 'Unit Tests', 'E2E Tests'].includes(check.name)
            );

            const allPassed = jobs.every(job => job.conclusion === 'success');
            const anyFailed = jobs.some(job => job.conclusion === 'failure');

            let body = '## 🚀 Pull Request Status\n\n';
            body += jobs.map(job => {
              const status = job.conclusion === 'success' ? '✅' :
                           job.conclusion === 'failure' ? '❌' : '⏳';
              return `${status} ${job.name}`;
            }).join('\n');

            body += '\n\n';

            if (allPassed) {
              body += '🎉 All checks have passed! Ready for review.';
            } else if (anyFailed) {
              body += '❌ Some checks have failed. Please review the errors above.';
            } else {
              body += '⏳ Checks are still running or have mixed results.';
            }

            // Find existing comment or create new one
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number
            });

            const existingComment = comments.find(comment =>
              comment.body.includes('## 🚀 Pull Request Status')
            );

            if (existingComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: existingComment.id,
                body
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body
              });
            }
